function Square(props) {
  return (
    <button className={props.winning ? 'square winning':'square'} onClick={props.onClick}>
      {props.value}
    </button>
  );
}

class Board extends React.Component {
  renderSquare(i) {
    let winning = false;
    if(this.props.winning.squares.indexOf(i)>=0) {
      winning = true;
    }
    return (
      <Square
        value={this.props.squares[i]}
        onClick={() => this.props.onClick(i)}
        winning={winning}
      />
    );
  }

  render() {
    const board = [];
    for(let i=0; i<3; i++) {
      const squares = [];
      for(let j=0; j<3; j++) squares.push(<span key={i*3+j}>{this.renderSquare(i*3+j)}</span>);
      board.push(<div className="board-row" key={i}>{squares}</div>);
    }
    
    return (
      <div>
        {board}
      </div>
    ); 
  }
}

class Game extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      history: [
        {
          squares: Array(9).fill(null), 
          col: null, 
          row: null,
        }
      ],
      stepNumber: 0,
      xIsNext: true, 
      sortAsc: true, 
      winning: {result: null, squares: []}
    };
  }

  handleClick(i) {
    const history = this.state.history.slice(0, this.state.stepNumber + 1);
    const current = history[history.length - 1];
    const squares = current.squares.slice();
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    squares[i] = this.state.xIsNext ? "X" : "O";
    
    const col = (i % 3)+1;
    const row = Math.floor(i/3)+1;
    
    this.setState({
      history: history.concat([
        {
          squares: squares,
          col: col, 
          row: row
        }
      ]),
      stepNumber: history.length,
      xIsNext: !this.state.xIsNext
    });
  }

  jumpTo(step) {
    this.setState({
      stepNumber: step,
      xIsNext: (step % 2) === 0
    });
  }

  toggleSort() {
    this.setState({
      sortAsc: !this.state.sortAsc
    });
  }

  render() {
    const history = this.state.history;
    const current = history[this.state.stepNumber];
    const winner = calculateWinner(current.squares);
    
    let moves = history.map((step, move) => {
      const desc = move ?
        'Go to move #' + move + " ["+step.col+","+step.row+"]" :
        'Go to game start';
      return (
        <li key={move}>
          <button 
            onClick={() => this.jumpTo(move)} 
            className={this.state.stepNumber==move ? 'bold':'none'}
          >
            {desc}
          </button>
        </li>
      );
    });
    
    let sort_desc = 'Sortuj malejąco';
    if(!this.state.sortAsc) {
      moves = moves.reverse();
      sort_desc = 'Sortuj rosnąco';
    }
    let sort = <button onClick={() => this.toggleSort()} >{sort_desc}</button>;
    
    let status;
    if (winner) {
      status = "Winner: " + winner.result;
      this.state.winning = winner;
    } else {
      if(moves.length==10) 
        status = "No more moves! The end.";
      else
        status = "Next player: " + (this.state.xIsNext ? "X" : "O");
    }

    return (
      <div className="game">
        <div className="game-board">
          <Board
            squares={current.squares}
            onClick={i => this.handleClick(i)}
            winning={this.state.winning}
          />
        </div>
        <div className="game-info">
          <div>{status}</div>
          <div>{sort}</div>
          <ol>{moves}</ol>
        </div>
      </div>
    );
  }
}

// ========================================

ReactDOM.render(<Game />, document.getElementById("root"));

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return {result: squares[a], squares: [a, b, c]};
    }
  }
  return null;
}
